"=================================================================
"                             vimrc                              "
"=================================================================
" vim:foldmarker={,}:foldmethod=marker:
"=================================================================
"  Revision  943
"  Modified  Monday, 27 August 2018
"=================================================================
set encoding=utf-8
scriptencoding utf-8
setlocal foldmarker={,}
setlocal foldmethod=marker
setlocal foldcolumn=1
setlocal keywordprg=:help


"=================================================================
" Set the Leader Key {
"=================================================================
let g:mapleader = ','
"} ===

"=================================================================
" jvim plugin options {
"=================================================================
let g:Jvim#vimopts#colorColumn        = 81 " Set long line guide
"let g:Jvim#vimopts#useSystemClipboard = 1  " Try to use system clipboard

let g:Jvim#highlightRed = 'GruvboxRedBold' " Highlight to link for Red

let g:Jvim#hidden#showTrailing = 1 " Show Tailing Spaces
let g:Jvim#hidden#showEol      = 0 " Show EOL marker
let g:Jvim#hidden#showIndent   = 0 " Show indent guides when (F2 Toggles)
let g:Jvim#hidden#codePretty   = 1 " Replace some chars with alternatives (F2 Toggles)

let g:Jvim#presistentUndo#enable = 1 " Use persistent Undo
let g:Jvim#presistentUndo#dir    = expand($DOTFILES.'/vim/undo') " Where to store persistent files

let g:Jvim#folding#syntax = 1 " Enable folding by syntax for all files
                              "  NOTE: Might be slow on older systems
let g:Jvim#folding#fold   = 3 " Folding Mode on File Open
                              " 0: none default vim
                              " 1: open all folds on file open
                              " 2: close all folds on file open
                              " 3: Auto save folds and reload them
                              "  NOTE: <t><t> in normal mode to toggle folds

let g:Jvim#quickFix#enable     = 0  " Enable auto resizing of the quick fix window
let g:Jvim#quickFix#heightMin  = 3  " Limit the MIN size of the quick fix window
let g:Jvim#quickFix#heightMax  = 10 " Limit the MAX size of the quick fix window

let g:Jvim#metadata#enable     = 1 " enable metadata auto update on file save
let g:Jvim#metadata#maxSearch  = 50 " Max lines at top of file to search for meta data tags
let g:Jvim#metadata#dateFormat = '%A, %d %B %Y' " Format for template and metadata dates (man date)

let g:Jvim#comment#enable      = 1 " Allow comment and uncomment system
"} ===

"=================================================================
" Gnome-Terminal ONLY {
"=================================================================
" <F7> cycle though mono powerline fonts
let g:powerlineFonts= [
            \'DejaVu Sans Mono for Powerline',
            \'Droid Sans Mono for Powerline',
            \'Droid Sans Mono Dotted for Powerline',
            \'Droid Sans Mono Slashed for Powerline',
            \'Fria Mono for Powerline'
            \'Go Mono for Powerline',
            \'Hack',
            \'Inconsolata for Powerline',
            \'Inconsolata-dz for Powerline',
            \'Inconsolata-g for Powerline',
            \'Literation Mono Powerline',
            \'Monofur for Powerline',
            \'Noto Mono for Powerline',
            \'NovaMono for Powerline',
            \'Roboto Mono for Powerline',
            \'Space Mono for Powerline'
            \'Ubuntu Mono derivative Powerline',
            \]

let g:font='DejaVu Sans Mono for Powerline'
let g:fontsize='11'

function! GnomeTermSetFont()
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
endfunction

function! GnomeTermCycleFont()
    call add(g:powerlineFonts, g:font)
    let g:font = get(g:powerlineFonts,0,'mono')
    let g:powerlineFonts=g:powerlineFonts[1:]
    call system ("dconf write /org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font \"\'" . g:font . ' ' . g:fontsize . "\'\"")
    echom g:font
endfunction

nnoremap <F7> :call GnomeTermCycleFont()<CR>
"} ===



"=================================================================
" Vim-Plug Plugin Manager Auto Install {
"=================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plugmanager
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC | q
    augroup end
endif
"} ===



"=================================================================
" Vim Color Support and Force
"=================================================================
if ($COLORTERM ==? 'truecolor')
    if has('termguicolors')
        set termguicolors
    endif
    if exists('$TMUX')
        let g:gruvbox_italic=0
        set t_ut=
    else
        let g:gruvbox_italic=1
        set t_ut=
    endif
else
    " No truecolor welcome to bad times
    " Hope term supports 256 colors
    let g:gruvbox_italic=0
    set term=xterm-256color
    set t_Co=256
    set t_ut=
endif

if $TERM ==? 'linux'
    " If Term is linux then we are in a 9 color environment
    let g:gruvbox_italic=0
    set t_Co=8
endif

if has('mac')
    let g:gruvbox_italic=0
endif




"=================================================================
"= #### Plugin Options #### {
"=================================================================
call plug#begin('~/.vim/bundle')


"=================================================================
" NerdTree to see files in tree mode {
"=================================================================
let g:JV_showEol=1       " Show EOL marker
let g:JV_codePretty = 1  " Show indent guides when
Plug 'john-warnes/jvim'
"} ===



"=================================================================
" NerdTree [Ctrl-B] {
"=================================================================
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
nnoremap <C-b> :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen    =1          " close NERDTree after  file is opened
let g:NERDTreeShowHidden    =1          " show hidden files in NERDTree
let g:NERDTreeWinSize       =20
let g:NERDTreeMapOpenInTab  ='<ENTER>'  " Open file in newtab
let g:NERDTreeIndicatorMapCustom = {
            \ 'Modified'  : '✹',
            \ 'Staged'    : '✚',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : '✖',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?'
            \ }
"} ===



"=================================================================
" ALE Linter <F8> to toggle {
"=================================================================
if has('job') && has ('timers')

    Plug 'w0rp/ale'
    set noshowmode
    let g:airline#extensions#ale#enabled = 1
"    let g:ale_sign_column_always = 1
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
"    let g:ale_c_cppcheck_options = '--enable=style' " --suppress=memleak:src/file1.cpp src/
    let g:ale_history_log_output=1  " use ALEInfo to see the full output if needed

    " Write this in your vimrc file
    "let g:ale_set_loclist = 1
    let g:ale_set_quickfix = 1
    let g:ale_open_list = 1
    " Set this if you want to.
    " This can be useful if you are combining ALE with
    " some other plugin which sets quickfix errors, etc.
    "let g:ale_keep_list_window_open = 0

else
    "=================================================================
    " Syntastic Syntax checking Plugin
    "=================================================================
    " Use :Erorrs to open location-list :lclose
    " :lnext and :lprevious
    Plug 'vim-syntastic/syntastic'
    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_loc_list_height = 5
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_mode_map = {
                \ "mode": "active",
                \ "passive_filetypes": ["python"] }
    "nnoremap <C-F8> :SyntasticToggleMode<CR>
    "nnoremap <F8> :SyntasticCheck<CR>
endif

augroup signcolumn
    autocmd!
    autocmd ColorScheme Gruvbox highlight clear SignColumn    
augroup end
"} ===



"=================================================================
" Airline Status Line and TmuxLine {
"=================================================================
let g:airline#extensions#tagbar#enabled = 0 "tagbar plugin is slow disable it
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'   "Lots of themes
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_section_c = '%F'              " Show full Path if possable
"let g:airline_theme='base16'               " Pick a theme
"let g:airline_theme='murmur'                " or
"let g:airline_theme='powerlineish'         " or
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#tmuxline#color_template = 'insert'
Plug 'edkolev/tmuxline.vim'     "have airline theme the tmux bar
"} ===



"=================================================================
" Fugitive for GIT
"=================================================================
" Try ":Gpush :Gdiff when file in reposory is open
Plug 'tpope/vim-fugitive'
" Allow :Gbrowse for github and other github support
Plug 'tpope/vim-rhubarb'


"=================================================================
" Latex Support
"=================================================================
Plug 'xuhdev/vim-latex-live-preview'
let g:livepreview_previewer = 'open -a Preview'

"=================================================================
" Language Support
"=================================================================
let g:C_CreateMenusDelayed = 'yes'
let g:C_MapLeader  = ','
Plug 'WolfgangMehner/c-support'
let g:C_UseToolbox = 'yes'
let g:C_UseTool_doxygen = 'yes'
let g:C_UseTool_cmake = 'yes'
"
Plug 'WolfgangMehner/bash-support'
let g:Bash_MapLeader  = ','
"Plug 'WolfgangMehner/latex-support'
"let g:Latex_MapLeader  = ','
"Plug 'WolfgangMehner/lua-support'
"let g:Lua_MapLeader  = ','
"Plug 'WolfgangMehner/perl-support'
"let g:Perl_MapLeader  = ','
"Plug 'WolfgangMehner/vim-support'
"let g:Vim_MapLeader  = ','
"Plug 'WolfgangMehner/python-support'
"let g:Python_MapLeader  = ','


"=================================================================
" Python mode
"=================================================================
Plug 'python-mode/python-mode'
"Template
augroup Python
    autocmd!
    autocmd BufNewFile *.py silent! 0r ~/.vim/templates/python-mode.template | cal cursor(8,4)
augroup END



"=================================================================
" Super tab completion
"=================================================================
Plug 'ervandew/supertab'



"=================================================================
" TagBar - Requires Exuberant Ctags {
"=================================================================
" Activate with TagbarOpen or Ctrl-T
" Jump to tag defenition: Ctrl-]
Plug 'majutsushi/tagbar'
nnoremap <C-t> :TagbarToggle<CR>
nnoremap <silent><C-]> <C-w><C-]><C-w>T
"map <Leader>y :TagbarToggle<CR>
let g:tagbar_width = 30
"}===



"=================================================================
" AnyFold Plugin
"=================================================================
" :h fold-commands: zo, zO, zc, za, etc
" Even better to use Fold Cycling Plugin
"Plug 'pseewald/vim-anyfold'
"let anyfold_activate=1
"set foldlevel=0
"set foldlevelstart=20
"augroup anyfold
"autocmd!
"    autocmd User anyfoldLoaded normal zv
"    autocmd BufWinEnter * normal! zR
"augroup END



"=================================================================
" Fold Cycling Plugin
"=================================================================
" provides the avility to cycle open and closed folds and
" nested folds
"Plug 'arecarn/vim-fold-cycle'
"let g:fold_cycle_default_mapping = 0 "disable default mappings
"nmap <Tab><Tab> <Plug>(fold-cycle-open)
"nmap <S-Tab><S-Tab> <Plug>(fold-cycle-close)

"=================================================================
" gruvbox Color Scheme {
"=================================================================
Plug 'morhetz/gruvbox'
" <F5> to switch from dark to light
" <F6> to cycle the 3 levels of contrast
nnoremap <silent> <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
nnoremap <silent> <F6> :call GruvCycleContrast()<CR>
function! GruvCycleContrast()
    if &background ==? 'dark'
        if g:gruvbox_contrast_dark ==? 'soft'
            let g:gruvbox_contrast_dark='medium'
        elseif g:gruvbox_contrast_dark ==? 'medium'
            let g:gruvbox_contrast_dark='hard'
        elseif g:gruvbox_contrast_dark ==? 'hard'
            let g:gruvbox_contrast_dark='soft'
        endif
    else
        if g:gruvbox_contrast_light ==? 'soft'
            let g:gruvbox_contrast_light='medium'
        elseif g:gruvbox_contrast_light ==? 'medium'
            let g:gruvbox_contrast_light='hard'
        elseif g:gruvbox_contrast_light ==? 'hard'
            let g:gruvbox_contrast_light='soft'
        endif
    endif
    colorscheme gruvbox
endfunction

set background=dark            " Start with dark background theme
silent! colorscheme2yy gruvbox    " Color scheme supports truecolor
colorscheme default           " this is the default vim scheme
"} ===

"=================================================================
" TMUX integration
"=================================================================
" <Ctrl + [h,j,k,l]> Move to vim panes and tmux widows
Plug 'christoomey/vim-tmux-navigator'



"=================================================================
" Code Snippets
"=================================================================
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger='<tab>'
"let g:UltiSnipsJumpForwardTrigger='<Nul>'
"let g:UltiSnipsJumpBackwardTrigger='<C-S-d>'
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit='vertical'
" Track the engine.
"Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
"Plug 'honza/vim-snippets'
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"


"=================================================================
" Startify: The fancy start screen for vim
"=================================================================
" :SLoad    load a session
" :SSave    save a session
" :SDelete  delete a session
" :SClose   close current session
"

let g:startify_fortune_use_unicode = 1
let g:startify_session_persistence = 0
let g:startify_bookmarks = [ {'c': '~/.vimrc'} ]
Plug 'mhinz/vim-startify'

"=================================================================
"=####################= END Plugin System =######################=
"=================================================================
call plug#end()
set synmaxcol=1000      " Only syntax hightlight 1000 columns right


"=================================================================
" Color Scheme
"=================================================================
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
if has('gui_running')
    set background=light
else
    set background=dark
endif

" colorscheme wombat256mod
" colorscheme default
silent! colorscheme gruvbox " colorscheme support truecolor



"=================================================================
" Behavior
"=================================================================
set nowritebackup              " only in case you don't want a backup file while editing
set noswapfile                 " no swap files
set nobackup                   " Just overwrite the file
set printoptions=paper:letter,number:y,portrait:y
set shortmess+=filmnrxoOtT     " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=tcq         " Basic formatting of text and comments
set wildmode=list:longest,full " Command <Tab> completion, list matches and
"  complete the longest common part, then,
"  cycle through the matches
set wildchar=<Tab>
"set wildchar=<Nul>
set mouse=a                    " on OSX press ALT and click
set backspace=2                       " Set backspace

" Bind nohl
" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
noremap <C-n> <Esc>:nohl<CR>
inoremap <C-n> <Esc>:nohl<CR>i




"=================================================================
" cTags {
"=================================================================
"let g:gen_tags#verbose = 1        " Give more feedback
let g:gen_tags#ctags_auto_gen = 1  " Auto generate ctags if in git
let g:gen_tags#use_cache_dir  = 1  " Put tags in git or else home cache
let g:loaded_gentags#gtags    = 1  " Disable gtags support not needed
nnoremap <Leader>t :GenCtags<CR>   " if tags didn't autogen force with <Leader>t

" Backup old style ctags generator
nnoremap <Leader>T
            \ :silent execute '!(rm tags)'<CR>
            \ :silent execute '!(ctags-exuberant -R -f %:p:h/tags *)&'<CR>
            \ :redraw!<CR>
            \ :echom 'Generated cTags'<CR>
            \ execute 'set tags=./tags;~/.vim/tags;tags;'
set tags=./tags;~/.vim/tags;tags;
"} ===

set mouse=a
"=================================================================
" Vim Editing and Behavior {
"=================================================================
set nocompatible               " Be vim
filetype plugin indent on
if !has('nvim') && has('nolangremap')
    set nolangremap                " avoid mapping breaks
endif
set modeline                   " Files can use modeline(s)
set modelines=10               " Check top and bottom 10 lines for modelines(s)
set nobackup                   " No Backups
set nowritebackup              " No Backups even when editing
set noswapfile                 " Don't leave swap files
set printoptions=paper:letter,number:y,portrait:y " defualt printing
set shortmess+=filmnrxoOtT     " Abbrev. of messages (avoids 'hit enter')
set formatoptions+=cq          " Basic formatting of text and comments
set formatoptions-=t           " Don't automatically wrap text when typing
set wildmenu                   " Use the wildmenu
set wildmode=list:longest,full " Command <Tab> completion, list matches and,
                               "  complete the longest common part,
                               "  then, cycle through the matches
set wildchar=<Tab>             " Use tab to move in the menu
set backspace=2                " Set backspace
set backspace=indent,eol,start " Allow backspace over listed types
set nostartofline              " Stay on current char on page commands
set visualbell                 " Don't beep, flash the screen instead
set scrolloff=1                " Use a 1 line (horizontal) scroll offset
set sidescrolloff=5            " Use a 5 column (virtual) scroll offset
set virtualedit=onemore        " Allow you to move the cursor to the newline
set termencoding=utf-8         " Lets try using Unicode
set wildmenu

"map sort function to a key
vnoremap <Leader>s :sort<CR>
"} ===



"=================================================================
" Vim Look and Decorations {
"=================================================================
set ruler                   " Show the line / column number of cursor
set showcmd                 " Show the partially completed command
set number                  " Display line number"
set numberwidth=5           " Use 5 spaces for number column"
set textwidth=79            " Width of document (used by gd)
set nowrap                  " Don't automatically wrap on load
set commentstring=\ #\ %s   " This how fold markers look
set cursorline              " Highlight the current line
set visualbell              " Visual bell instead of beeping

" Changes the shape of the cursor depending on the current mode
"if has('gui_running')
"    set guicursor=n-v-c:block-Cursor
"    set guicursor+=i:ver100-iCursor
"    set guicursor+=n-v-c:blinkon0
"    "set guicursor+=i:blinkwait10
"else
"    let &t_SI = "\<Esc>[6 q"
"    let &t_SR = "\<Esc>[4 q"
"    let &t_EI = "\<Esc>[2 q"
"endif
"} ===


"=================================================================
" Vim Search Options {
"=================================================================
set ignorecase             " Ignore case in search patterns
set infercase              " Don't ignore case in auto completion
                           "  but do Ignore it in search patterns
set smartcase              " Don't ignore case if pattern contains it
set incsearch              " Show the 'best match so far'
set wrapscan               " Search will wrap around the file
set hlsearch               " Highlight all matches
"} ===


"=================================================================
" Vim Indent and Programming Options {
"=================================================================
set autoindent                 " Keep indent level on new line
set nosmartindent              " Intelligent indenting for source code
set cindent                    " Intelligent indenting for source code
set cinkeys=0{,0},!^F,o,O,e    " default is: 0{,0},0),:,0#,!^F,o,O,e
set showmatch                  " Show matching brackets / parenthesis
set matchtime=5                " Show matching character for .3s
"} ===

"=================================================================
" Vertical indenting {
"=================================================================
set shiftwidth=4               " Number of spaces used for autoindents
set tabstop=4                  " Set the tab width to 4
set softtabstop=4
set expandtab
set textwidth=0
set smarttab                " Allow Tab to match previous line
"} ===



"=================================================================
" Mappings and Keybindings {
"     Every unnecessary keystroke that can be saved is good for
"     your health :)
"=================================================================
" zM   "Close all folds
" zR   "Open all folds

" Easier moving between tabs
nnoremap <Leader>n <Esc>:tabprevious<CR>
nnoremap <Leader>m <Esc>:tabnext<CR>

" Sort visual mode selected lines
vnoremap <Leader>s :sort<CR>

nnoremap <C-n> <Esc>:nohl<CR>   " Remove highlight from search
inoremap <C-n> <Esc>:nohl<CR>i  " Remove hightight from search

" mac os make <FN+Arrows> work as CTRL+Arrows
if has('macunix')
    map <ESC>[5~ <C-Up>
    map <ESC>[6~ <C-Down>
    map <ESC>OH <C-Left>
    map <ESC>OF <C-Right>
endif

"} ===


"}= #### Vim Settings END ####


"=================================================================
" Shift-K Help support {
"=================================================================
" Use <Shift-K> to lookup help for word under the cursor
augroup shift-K
    autocmd!
    autocmd FileType cpp set keywordprg=cppman
    autocmd FileType c set keywordprg=man\ -S3
augroup END
"} ===

" EOF != <= >= x^2 y^3 1^2 pi 44^2 pie    
"=================================================================
" Highligth column 80.
"=================================================================
if has('g:colors_name')
    if g:colors_name = "gruvbox"
        let &colorcolumn=join(range(81,84),",")
    else
        set colorcolumn=80
    endif
else
    hi clear Folded
    hi Folded term=standout cterm=standout gui=standout
    set colorcolumn=80
endif


"=================================================================
" Startify: The fancy start screen for vim
" Created by: figlet -f slant "Dr. Valle"
"=================================================================
"let g:startify_custom_header = [
"            \'',
"            \'        ____            _    __      ____   ',
"            \'        / __ \_____     | |  / /___ _/ / /__ ',
"            \'       / / / / ___/     | | / / __ `/ / / _ \',
"            \'      / /_/ / /  _      | |/ / /_/ / / /  __/',
"            \'     /_____/_/  (_)     |___/\__,_/_/_/\___/ ',
"            \'',
"            \'',
"            \]
